<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022 Henan Mengxin League Game 1</title>
    <url>/2023/03/05/2022-Henan-Mengxin-League-Game-1/</url>
    <content><![CDATA[<blockquote>
<p>[比赛链接](<a href="https://ac.nowcoder.com/acm/contest/52490?&headNav=www#question">牛客竞赛_ACM&#x2F;NOI&#x2F;CSP&#x2F;CCPC&#x2F;ICPC算法编程高难度练习赛_牛客竞赛OJ (nowcoder.com)</a>)</p>
</blockquote>
<h1 id="A-Alice-ans-Bob"><a href="#A-Alice-ans-Bob" class="headerlink" title="A. Alice ans Bob"></a>A. Alice ans Bob</h1><p><strong>思路</strong> ：</p>
<p>先 <strong>分解质因数</strong> ，把质因数数量当作没堆石子的数量，然后反尼姆博弈。</p>
<ul>
<li>反尼姆博弈做法</li>
</ul>
<blockquote>
<ol>
<li>各堆石子数目 <strong>异或</strong> 结果 <strong>不等于0</strong>，且 <strong>存在有石子数目大于1的石子堆</strong>。</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>各堆石子数目 <strong>异或</strong> 结果 <strong>等于0</strong>，且 <strong>所有石子堆数目全部为1</strong>。</li>
</ol>
</blockquote>
<p><strong>代码</strong> ：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> func = [&amp;sign](<span class="type">int</span> n)-&gt;<span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;<span class="type">int</span> scr = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    scr++;</span><br><span class="line">                    n /= i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(scr &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sign = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">func</span>(n) % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; !sign)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">out</span>(<span class="string">&quot;Bob win&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">out</span>(<span class="string">&quot;Alice win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="B-打对子"><a href="#B-打对子" class="headerlink" title="B. 打对子"></a>B. 打对子</h1><p><strong>思路</strong>：</p>
<p>统计alice和bob <strong>手牌数量是奇数个数的牌有几种</strong>（有一丝丝绕，就是统计每种牌的数量，然后统计是奇数数量的牌的种类数），然后比较数量，注意需要alice剩余数量 <strong>严格</strong> 小于bob才算赢。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    string alice;cin &gt;&gt; alice;</span><br><span class="line">    string bob;cin &gt;&gt; bob;</span><br><span class="line">    map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; ddz_alice,ddz_bob;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ddz_alice[alice[i]]++;</span><br><span class="line">        ddz_bob[bob[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt_alice = <span class="number">0</span>,cnt_bob = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [k,v] : ddz_alice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt_alice += (v % <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [k,v] : ddz_bob)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt_bob += (v % <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     cout &lt;&lt; cnt_alice &lt;&lt; &quot; &quot; &lt;&lt; cnt_bob &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">    <span class="built_in">out</span>(cnt_alice);</span><br><span class="line">    <span class="keyword">if</span>(cnt_alice &lt; cnt_bob)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">out</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">out</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-纪念品领取"><a href="#D-纪念品领取" class="headerlink" title="D.纪念品领取"></a>D.纪念品领取</h1><p><strong>思路</strong>：</p>
<p>先初始化每个人的 <strong>位置和权值（姑且称他为权值）</strong>， 然后将 <strong>第 i 个选中的人的权值修改为 n + i</strong>，然后按照 <strong>权值</strong> 排序后，再按照 <strong>位置</strong> 排序前五个人，输出前五个即可。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> id,st; &#125;;<span class="function">vector&lt;Node&gt; <span class="title">arr</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = &#123;i,i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> scr = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;cin &gt;&gt; x;</span><br><span class="line">        arr[x].st = scr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>() + <span class="number">1</span>,arr.<span class="built_in">begin</span>() + n + <span class="number">1</span>,[&amp;](Node x,Node y)-&gt;<span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.st &lt; y.st;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>() + <span class="number">1</span>,arr.<span class="built_in">begin</span>() + <span class="number">6</span>,[&amp;](Node x,Node y)-&gt;<span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i].id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E-聚会"><a href="#E-聚会" class="headerlink" title="E.聚会"></a>E.聚会</h1><p><strong>思路</strong>：</p>
<p>对每个人的活跃度按照从小到大进行排序，然后从最小的开始统计前n项和加1的值，比较新的值和当前元素的大小关系（是否相等或小于），是则继续，否则输出。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>() + <span class="number">1</span>,arr.<span class="built_in">begin</span>() + n + <span class="number">1</span>,[&amp;](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt;= b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt;= res)</span><br><span class="line">        &#123;</span><br><span class="line">            res += arr[i];</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G-热身小游戏"><a href="#G-热身小游戏" class="headerlink" title="G.热身小游戏"></a>G.热身小游戏</h1><p><strong>思路</strong>：</p>
<p>使得 <strong>序列初始值全部为1</strong>，使用线段树维护 <strong>区间乘积</strong>，操作1即单点修改（将下标 i 的对应值改为 a），操作2即区间修改（将 [l,r] 区间内的值修改为1），操作3即输出线段树祖宗节点的值</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SegTree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r,lazy,val;</span><br><span class="line">        <span class="built_in">Node</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            l = r = lazy = <span class="number">0</span>;</span><br><span class="line">            val = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lSon</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rSon</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tree[idx].val = tree[<span class="built_in">lSon</span>(idx)].val * tree[<span class="built_in">rSon</span>(idx)].val % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下传标记</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[idx].lazy)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[<span class="built_in">lSon</span>(idx)].val = tree[<span class="built_in">rSon</span>(idx)].val = tree[<span class="built_in">lSon</span>(idx)].lazy = tree[<span class="built_in">rSon</span>(idx)].lazy = <span class="number">1</span>;</span><br><span class="line">            tree[idx].lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 建树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        tree[idx].l = l,tree[idx].r = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">lSon</span>(idx), l, mid);<span class="built_in">build</span>(<span class="built_in">rSon</span>(idx), mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">update</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单点修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changePoint</span><span class="params">(<span class="type">int</span> idx,<span class="type">int</span> x,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[idx].l == tree[idx].r) &#123;</span><br><span class="line">            tree[idx].val = val;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (tree[idx].l + tree[idx].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">changePoint</span>(<span class="built_in">lSon</span>(idx), x, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">changePoint</span>(<span class="built_in">rSon</span>(idx), x, val);</span><br><span class="line">        <span class="built_in">update</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区间修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changeRange</span><span class="params">(<span class="type">int</span> idx,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[idx].l &gt;= l &amp;&amp; tree[idx].r &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[idx].val = tree[idx].lazy = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushDown</span>(idx);</span><br><span class="line">        <span class="type">int</span> mid = (tree[idx].l + tree[idx].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">changeRange</span>(<span class="built_in">lSon</span>(idx), l, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">changeRange</span>(<span class="built_in">rSon</span>(idx), l, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">update</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q;cin &gt;&gt; q;</span><br><span class="line">    SegTree::<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a;cin &gt;&gt; a;</span><br><span class="line">            SegTree::<span class="built_in">changePoint</span>(<span class="number">1</span>,i,a);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l,r;cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            SegTree::<span class="built_in">changeRange</span>(<span class="number">1</span>,l,r,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">out</span>(SegTree::tree[<span class="number">1</span>].val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="J-樱果运输"><a href="#J-樱果运输" class="headerlink" title="J.樱果运输"></a>J.樱果运输</h1><p><strong>思路</strong>：</p>
<p>动态规划，二维01背包变形。</p>
<p>递推公式：</p>
<blockquote>
<p>dp[j][k] &#x3D; max(dp[j][k],  dp[j - w[i]][k - 1] + v[i]);</p>
</blockquote>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> w,v; &#125;;<span class="function">vector&lt;Node&gt; <span class="title">arr</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> w_ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[w,v] = arr[i];</span><br><span class="line">        cin &gt;&gt; w &gt;&gt; v;w_ans += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [w,v] = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = w_ans;j &gt;= w;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = n;k &gt; <span class="number">0</span>;k--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j][k] = <span class="built_in">max</span>(dp[j][k], dp[j - w][k - <span class="number">1</span>] + v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="type">int</span> sign = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[x][j] &gt;= y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">out</span>(j);sign = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">out</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="K-糟糕的一天"><a href="#K-糟糕的一天" class="headerlink" title="K.糟糕的一天"></a>K.糟糕的一天</h1><p><strong>签到题</strong></p>
<p><strong>思路</strong>：</p>
<p>倒序遍历，比较元素大小就ok（也可以双重for(别被数据大小吓住，1e9但是可暴力)）</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>,kk = arr[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; kk)</span><br><span class="line">        &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        kk = <span class="built_in">max</span>(kk, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>-补题记录</category>
      </categories>
      <tags>
        <tag>-训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NowCoder Winter Camp 1</title>
    <url>/2023/01/17/2023-NowCoder-Winter-Camp-1/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/46800" title="2023牛客寒假算法基础集训营1 ">https://ac.nowcoder.com/acm/contest/46800</a></p>
</blockquote>
<h1 id="A-World-Final-World-Cup-I"><a href="#A-World-Final-World-Cup-I" class="headerlink" title="A.World Final? World Cup! (I)"></a>A.World Final? World Cup! (I)</h1><p><strong>思路</strong>：<br>通过奇偶区分两个人，当前字符为’1’，对应得分加一，一轮结束后判断如果这个人 <strong>当前得分加上剩下的几局全胜的得分任然小于另一个人</strong> 的话就直接结束</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                ans1++;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                ans2++;</span><br><span class="line">        &#125;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">if</span> (ans1 + (<span class="number">10</span> - i - <span class="number">1</span>) / <span class="number">2</span> &lt; ans2 ||</span><br><span class="line">            ans2 + (<span class="number">10</span> - i) / <span class="number">2</span> &lt; ans1)</span><br><span class="line">        &#123;</span><br><span class="line">            sign = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sign)</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-现在是，学术时间-I"><a href="#C-现在是，学术时间-I" class="headerlink" title="C. 现在是，学术时间 (I)"></a>C. 现在是，学术时间 (I)</h1><p><strong>大水题</strong></p>
<p><strong>思路</strong>：<br>由题中对H的定义可以发现，引用量为0时，定义 <strong>“有至少0篇论文的引用量大于等于0”</strong> ，所以直接统计数据中非0元素个数即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x)</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F-鸡玩炸蛋人"><a href="#F-鸡玩炸蛋人" class="headerlink" title="F.鸡玩炸蛋人"></a>F.鸡玩炸蛋人</h1><p><strong>思路</strong>：</p>
<ol>
<li>无向图 dfs搜索遍历路径</li>
<li>万能的DSU大法</li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Graph</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val, next;</span><br><span class="line">    &#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; head, vis;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        head.<span class="built_in">resize</span>(N), vis.<span class="built_in">resize</span>(N);</span><br><span class="line">        <span class="built_in">fill</span>(head.<span class="built_in">begin</span>(), head.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[k] = &#123;v, head[u]&#125;;</span><br><span class="line">        head[u] = k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> val = e[i].val;</span><br><span class="line">            <span class="keyword">if</span> (!vis[val])</span><br><span class="line">                <span class="built_in">dfs</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    Graph::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        Graph::<span class="built_in">insert</span>(u, v), Graph::<span class="built_in">insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Graph::vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                Graph::cnt = <span class="number">0</span>;</span><br><span class="line">                Graph::<span class="built_in">dfs</span>(i);</span><br><span class="line">                ans += Graph::cnt * Graph::cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &amp;&amp; !Graph::vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Graph::cnt = <span class="number">0</span>;</span><br><span class="line">            Graph::<span class="built_in">dfs</span>(i);</span><br><span class="line">            ans = Graph::cnt * Graph::cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G-鸡格线"><a href="#G-鸡格线" class="headerlink" title="G.鸡格线"></a>G.鸡格线</h1><p><strong>思路</strong>：<br>线段树，区间和、最大 and 最小值，区间修改，区间查询</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SegTree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="type">int</span> sum, maxn, minn;</span><br><span class="line">    &#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ls</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tree[u].sum = tree[<span class="built_in">ls</span>(u)].sum + tree[<span class="built_in">rs</span>(u)].sum;</span><br><span class="line">        tree[u].maxn = <span class="built_in">max</span>(tree[<span class="built_in">ls</span>(u)].maxn, tree[<span class="built_in">rs</span>(u)].maxn);</span><br><span class="line">        tree[u].minn = <span class="built_in">min</span>(tree[<span class="built_in">ls</span>(u)].minn, tree[<span class="built_in">rs</span>(u)].minn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[u] = &#123;l, r, arr[l], arr[l], arr[l]&#125;;</span><br><span class="line">            <span class="keyword">if</span> (arr[l] == <span class="number">0</span>)</span><br><span class="line">                tree[u].maxn = tree[u].minn = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tree[u].l = l, tree[u].r = r;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">ls</span>(u), l, mid), <span class="built_in">build</span>(<span class="built_in">rs</span>(u), mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushUp</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changeRange</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].maxn &lt;= <span class="number">100</span> &amp;&amp; tree[u].minn &gt;= <span class="number">99</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].l &gt; r || tree[u].r &lt; l)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].l == tree[u].r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (val &amp;&amp; tree[u].maxn != <span class="number">100</span> &amp;&amp; tree[u].maxn != <span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[u].maxn = <span class="built_in">sqrt</span>(tree[u].maxn) * <span class="number">10</span> + <span class="number">0.5</span>;</span><br><span class="line">                val--;</span><br><span class="line">            &#125;</span><br><span class="line">            tree[u].sum = tree[u].minn = tree[u].maxn;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">changeRange</span>(<span class="built_in">ls</span>(u), l, r, val), <span class="built_in">changeRange</span>(<span class="built_in">rs</span>(u), l, r, val);</span><br><span class="line">        <span class="built_in">pushUp</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].l &gt;= l &amp;&amp; tree[u].r &lt;= r)</span><br><span class="line">            <span class="keyword">return</span> tree[u].sum;</span><br><span class="line">        <span class="type">int</span> mid = (tree[u].l + tree[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            res = <span class="built_in">query</span>(<span class="built_in">ls</span>(u), l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">            res += <span class="built_in">query</span>(<span class="built_in">rs</span>(u), l, r);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    SegTree::<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, k;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            SegTree::<span class="built_in">changeRange</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; SegTree::<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="H-本题主要考察了DFS"><a href="#H-本题主要考察了DFS" class="headerlink" title="H.本题主要考察了DFS"></a>H.本题主要考察了DFS</h1><p>**一整个大诈骗题! **</p>
<p><strong>思路</strong>：<br>首先，<strong>别看题目标题</strong>，真的和dfs没有关系，题目给出是一个 <strong>n*n</strong> 的拼图，也就是最后 <strong>所有拼图的突出和凹陷的块儿最后肯定是互补的</strong> ，不需要考虑位置怎样，也就是给出 <strong>已知的拼图块的凸出就是未知的凹陷，已知的拼图块的凹陷就是未知的凸出</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string str;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s : str)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                y++;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">                x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">10</span> - x + y &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="K-本题主要考察了dp"><a href="#K-本题主要考察了dp" class="headerlink" title="K.本题主要考察了dp"></a>K.本题主要考察了dp</h1><p><strong>思路</strong>：<br>这题可以dp也可以贪心，果断贪心（问就是不会dp不会写<br>假设将每个字符串都按照 <strong>‘100100100…111111’</strong> 放置</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> sum1 = m, sum0 = n - m;</span><br><span class="line">    sum0 /= <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!sum0)</span><br><span class="line">        res = n - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        res = <span class="built_in">max</span>(<span class="number">0ll</span>, sum1 - sum0 - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NowCoder Winter Camp 3</title>
    <url>/2023/01/21/2023-NowCoder-Winter-Camp-3/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/46811" title="2023牛客寒假算法基础集训营3">https://ac.nowcoder.com/acm/contest/46811</a></p>
</blockquote>
<h1 id="A-不断减损的时间"><a href="#A-不断减损的时间" class="headerlink" title="A.不断减损的时间"></a>A.不断减损的时间</h1><p><strong>思路</strong>：<br><strong>非正数和奇数保持不变，偶数一直除2知道变为1或者奇数</strong>，求和即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; !(x &amp; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!(x &amp; <span class="number">1</span>))</span><br><span class="line">                x /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += x;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-忽远忽近的距离"><a href="#C-忽远忽近的距离" class="headerlink" title="C.忽远忽近的距离"></a>C.忽远忽近的距离</h1><p><strong>思路</strong>：<br>指数阶dfs搜索即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; arr, vis;</span><br><span class="line">    arr.<span class="built_in">resize</span>(n + <span class="number">5</span>), vis.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">    function&lt; <span class="type">void</span>(<span class="type">int</span>) &gt; dfs = [&amp;](<span class="type">int</span> u) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &gt; n &amp;&amp; !sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            sign = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sign)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> cur = u + dx[i];</span><br><span class="line">            <span class="keyword">if</span> (cur &lt;= <span class="number">0</span> || cur &gt; n || vis[cur])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis[cur] = <span class="number">1</span>;</span><br><span class="line">            arr[u] = cur;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            vis[cur] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!sign)</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-宿命之间的对决"><a href="#D-宿命之间的对决" class="headerlink" title="D.宿命之间的对决"></a>D.宿命之间的对决</h1><p><strong>思路</strong>：<br>简单博弈，<strong>n为偶数小红必胜</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yukari\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kou\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E-公平守望的灯塔"><a href="#E-公平守望的灯塔" class="headerlink" title="E.公平守望的灯塔"></a>E.公平守望的灯塔</h1><p><strong>思路</strong>：<br>问题可以转化为，已知正方形一条对角线两顶点坐标，求另一对角线任意顶点坐标</p>
<p>公式如下：<br><strong>已知两点(a,b),(c,d)<br>x1&#x3D;(a-b+c+d)&#x2F;2，y1&#x3D;(a+b-c+d)&#x2F;2<br>x2&#x3D;(a+b+c-d)&#x2F;2，y2&#x3D;(-a+b+c+d)&#x2F;2</strong></p>
<p>先计算浮点数答案，然后 <strong>判断转int后是否依旧满足公式</strong>，满足输出答案，否则输出 No Answer!</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a, b, c, d;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="type">double</span> x1 = (a - b + c + d) / <span class="number">2.0</span>, y1 = (a + b - c + d) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="type">double</span> x2 = (a + b + c - d) / <span class="number">2.0</span>, y2 = (-a + b + c + d) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;]() -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> _x1 = (<span class="type">int</span>)x1, _y1 = (<span class="type">int</span>)y1;</span><br><span class="line">        <span class="type">int</span> _x2 = (<span class="type">int</span>)x2, _y2 = (<span class="type">int</span>)y2;</span><br><span class="line">        <span class="keyword">if</span> ((_x1 == x1 &amp;&amp; _y1 == y1) || (_x2 == x2 &amp;&amp; _y2 == y2))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>())</span><br><span class="line">        cout &lt;&lt; (<span class="type">int</span>)x1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (<span class="type">int</span>)y1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No Answer!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NowCoder Winter Camp 2</title>
    <url>/2023/01/19/2023-NowCoder-Winter-Camp-2/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/46810" title="2023牛客寒假算法基础集训营2">https://ac.nowcoder.com/acm/contest/46810</a></p>
</blockquote>
<h1 id="A-Tokitsukaze-and-a-b-x3D-n-easy"><a href="#A-Tokitsukaze-and-a-b-x3D-n-easy" class="headerlink" title="A.Tokitsukaze and a+b&#x3D;n (easy)"></a>A.Tokitsukaze and a+b&#x3D;n (easy)</h1><p><strong>签到题</strong></p>
<p><strong>思路</strong>：<br>遍历 <strong>[l1,r1]</strong> 区间，判断 <strong>n-i</strong> 是否在 <strong>[l2,r2]</strong> 区间内</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">    cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l1; i &lt;= r1; i++)</span><br><span class="line">        <span class="keyword">if</span> (n - i &gt;= l2 &amp;&amp; n - i &lt;= r2)</span><br><span class="line">            ans++;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-Tokitsukaze-and-a-b-x3D-n-medium"><a href="#B-Tokitsukaze-and-a-b-x3D-n-medium" class="headerlink" title="B.Tokitsukaze and a+b&#x3D;n (medium)"></a>B.Tokitsukaze and a+b&#x3D;n (medium)</h1><p><strong>思路</strong>：<br>对于 <strong>[l1,r1]</strong> 区间 **有贡献的区间为[n-l1,n-r1]**，所以计算 <strong>[n-l1,n-r1]与[l2,r2]区间的交集</strong> 就可以得出结果</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">    cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line">    <span class="type">int</span> r = n - l2;</span><br><span class="line">    <span class="type">int</span> l = n - r2;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; l1 || l &gt; r1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l1 = <span class="built_in">max</span>(l1, l), r1 = <span class="built_in">min</span>(r1, r);</span><br><span class="line">    cout &lt;&lt; r1 - l1 + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-Tokitsukaze-and-Energy-Tree"><a href="#D-Tokitsukaze-and-Energy-Tree" class="headerlink" title="D.Tokitsukaze and Energy Tree"></a>D.Tokitsukaze and Energy Tree</h1><p><strong>思路</strong>：<br>从题目中可以看出，<strong>给深度越深的节点以更大的能量时，对上方节点贡献越大</strong>，所以，把较大的能量球给深度较深的节点，能量小的放在小的节点即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; son[n + <span class="number">1</span>], arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        son[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>() + <span class="number">1</span>, arr.<span class="built_in">begin</span>() + <span class="number">1</span> + n);</span><br><span class="line">    queue&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> cur = tmp.first, dep = tmp.second;</span><br><span class="line">        res += arr[++cnt] * dep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : son[cur])</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x, dep + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E-Tokitsukaze-and-Function"><a href="#E-Tokitsukaze-and-Function" class="headerlink" title="E.Tokitsukaze and Function"></a>E.Tokitsukaze and Function</h1><p><strong>思路</strong>：<br>对函数求导可以得出 <strong>极值点为 sqrt(x)</strong> ，单调性为 <strong>先减后增</strong>，即 <strong>极小值为sqrt(x)</strong> ，所以只需判断 <strong>极值点是否在[l,r]区间内</strong> 从而确定最小值，<strong>对 [l,min(sqrt(x),r)] 二分即可</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, ll, rr;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; ll &gt;&gt; rr;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(n / ll + ll - <span class="number">1</span>), v.<span class="built_in">push_back</span>(n / rr + rr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (tmp &gt;= ll &amp;&amp; tmp &lt;= rr)</span><br><span class="line">        v.<span class="built_in">push_back</span>(n / tmp + tmp - <span class="number">1</span>);</span><br><span class="line">    tmp++;</span><br><span class="line">    <span class="keyword">if</span> (tmp &gt;= ll &amp;&amp; tmp &lt;= rr)</span><br><span class="line">        v.<span class="built_in">push_back</span>(n / tmp + tmp - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">auto</span> minn = <span class="built_in">min_element</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (n / tmp + tmp - <span class="number">1</span> != *minn)</span><br><span class="line">        tmp--;</span><br><span class="line">    <span class="type">int</span> l = ll, r = <span class="built_in">min</span>(tmp, rr);</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n / mid + mid - <span class="number">1</span> &lt;= *minn)</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="J-Tokitsukaze-and-Sum-of-MxAb"><a href="#J-Tokitsukaze-and-Sum-of-MxAb" class="headerlink" title="J.Tokitsukaze and Sum of MxAb"></a>J.Tokitsukaze and Sum of MxAb</h1><p><strong>思路</strong>：<br>从题目公式展开可得<br>第i行为 ** n * a[i] + a[1] + a[2] + … + a[n] **<br>共有n行，那么整理可得<br>** ans &#x3D; n(a[1] + a[2] + … + a[n]) + n(a[1] + a[2] + … + a[n]) **<br>即<br>** ans &#x3D; 2n(a[1] + a[2] + … + a[n]) **</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> _abs = [](<span class="type">int</span> a) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt;= <span class="number">0</span> ? a : -a;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        ans += _abs(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans * n * <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 284 D</title>
    <url>/2023/01/15/AtCoder-Beginner-Contest-284-D/</url>
    <content><![CDATA[<h1 id="D-Happy-New-Year-2023"><a href="#D-Happy-New-Year-2023" class="headerlink" title="D - Happy New Year 2023"></a>D - Happy New Year 2023</h1><blockquote>
<p>题目链接：<a href="https://atcoder.jp/contests/abc284/tasks/abc284_d" title="Happy New Year 2023">https://atcoder.jp/contests/abc284/tasks/abc284_d</a></p>
</blockquote>
<p><strong>思路</strong>：</p>
<p>比赛的时候只想到了 <strong>质因数分解</strong>，（十分自信的码了质因数分解的板子上去），然后 <strong>tle</strong> 的一塌糊涂</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span> || x == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; x % <span class="number">6</span> != <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> s = <span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt;= s; i += <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span> || x % (i + <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">pfc</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; pri;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pri.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> pri;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(n))</span><br><span class="line">        &#123;</span><br><span class="line">            pri.<span class="built_in">push_back</span>(n);</span><br><span class="line">            <span class="keyword">return</span> pri;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pri.<span class="built_in">push_back</span>(i), n /= i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pri.<span class="built_in">push_back</span>(n);</span><br><span class="line">    <span class="keyword">return</span> pri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>赛后看到正解（自闭了很久</p>
<p>可以先求出一个数，然后根据题目 <strong>N &#x3D; p^2*q</strong> 算出另一个数</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> scr = n, k = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt; <span class="type">int</span>, <span class="type">int</span> &gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                n /= i, k++;</span><br><span class="line">            mp[k] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        mp[<span class="number">2</span>] = (<span class="type">int</span>)<span class="built_in">sqrt</span>(scr / mp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mp[<span class="number">1</span>] = scr / (mp[<span class="number">2</span>] * mp[<span class="number">2</span>]);</span><br><span class="line">    cout &lt;&lt; mp[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>刷题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 285 A-D</title>
    <url>/2023/01/16/AtCoder-Beginner-Contest-285-A-D/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://atcoder.jp/contests/abc285" title="AtCoder Beginner Contest 285">https://atcoder.jp/contests/abc285</a></p>
</blockquote>
<h1 id="A-Edge-Checker-2"><a href="#A-Edge-Checker-2" class="headerlink" title="A.Edge Checker 2"></a>A.Edge Checker 2</h1><p><strong>思路</strong>：<br>由图可以看出是个二叉树，那么，当且仅当 <strong>b &#x3D; 2a or b &#x3D; 2a + 1</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span>(a * <span class="number">2</span> == b || a * <span class="number">2</span> + <span class="number">1</span> == b)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-Longest-Uncommon-Prefix"><a href="#B-Longest-Uncommon-Prefix" class="headerlink" title="B.Longest Uncommon Prefix"></a>B.Longest Uncommon Prefix</h1><p><strong>思路</strong>：<br>从i &#x3D; 1开始枚举到 <strong>str[l] &#x3D;&#x3D; str[k+l]</strong> 的情况，<strong>str[l] !&#x3D; str[k+l]</strong> 时停止</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j + i &lt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[j] != str[j + i])</span><br><span class="line">                    ans++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-abc285-brutmhyhiizp"><a href="#C-abc285-brutmhyhiizp" class="headerlink" title="C.abc285_brutmhyhiizp"></a>C.abc285_brutmhyhiizp</h1><p><strong>思路</strong>：<br>A<del>Z对应1</del>26，从题目给出的规律可以得出，最终结果就是字符串每一位对应的数字乘以 <strong>26的len-i-1次方</strong> 的累加和</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _pow(<span class="type">int</span> num, <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= num;</span><br><span class="line">        num *= num;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = str[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        ans += k * _pow(<span class="number">26</span>, len - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-Change-Usernames"><a href="#D-Change-Usernames" class="headerlink" title="D.Change Usernames"></a>D.Change Usernames</h1><p>比赛的时候想到用map实现字符串哈希，but因为我的奇葩写法，导致样例都没过</p>
<p><strong>思路</strong>：<br>向上面说的map实现字符串哈希，然后拓扑排序判环是可以解出这道题的</p>
<p>这里说一种 <strong>并查集</strong> 的简单做法</p>
<p>还是用到map，稍微经过一些蜜汁处理，然后对merge动点手脚（bushi 就可以完美解决这道题</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m, fa[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != fa[x])</span><br><span class="line">            <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[x] = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    map&lt; string, <span class="type">int</span> &gt; mp;</span><br><span class="line">    <span class="keyword">auto</span> sign = [&amp;](string s) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">find</span>(s) == mp.<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> mp[s] = ++m;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mp[s];</span><br><span class="line">    &#125;;</span><br><span class="line">    DSU::<span class="built_in">init</span>(<span class="number">1000000</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (DSU::<span class="built_in">merge</span>(<span class="built_in">sign</span>(s), <span class="built_in">sign</span>(t)))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCode Beginner Contest 286 A-D</title>
    <url>/2023/01/22/AtCode-Beginner-Contest-286-A-D/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://atcoder.jp/contests/abc286" title="UL Systems Programming Contest 2023(AtCoder Beginner Contest 286)">https://atcoder.jp/contests/abc286</a></p>
</blockquote>
<h1 id="A-Range-Swap"><a href="#A-Range-Swap" class="headerlink" title="A.Range Swap"></a>A.Range Swap</h1><p><strong>签到题</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,p,q,r,s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p &gt;&gt; q &gt;&gt; r &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; q - p + <span class="number">1</span>;i++)</span><br><span class="line">        <span class="built_in">swap</span>(arr[p + i],arr[r + i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-Cat"><a href="#B-Cat" class="headerlink" title="B.Cat"></a>B.Cat</h1><p><strong>签到题</strong><br>遍历字符串，逢 na 输出 nya 即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;n&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;nya&quot;</span>, i += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; str[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-Rotate-and-Palindrome"><a href="#C-Rotate-and-Palindrome" class="headerlink" title="C.Rotate and Palindrome"></a>C.Rotate and Palindrome</h1><p><strong>思路</strong>：<br>枚举操作一的次数，然后计算操作二的花费，取和的最小值即可</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e18</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">auto</span> getcost = [&amp;](<span class="type">int</span> fst) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> lst = (fst - <span class="number">1</span> + n) % n, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cnt = n / <span class="number">2</span>; cnt;</span><br><span class="line">             fst = (fst + <span class="number">1</span>) % n, lst = (lst - <span class="number">1</span> + n) % n, --cnt)</span><br><span class="line">            res += (str[fst] != str[lst]) * b;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, i * a + <span class="built_in">getcost</span>(i));</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-Money-in-Hand"><a href="#D-Money-in-Hand" class="headerlink" title="D.Money in Hand"></a>D.Money in Hand</h1><p><strong>思路</strong>：<br>多重背包，设 dp[i] 为能否凑出 i 元，转移枚举使用那种硬币 and 使用多少个</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">dp</span><span class="params">(x + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = x; j &gt;= a; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= b; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= k * a)</span><br><span class="line">                    dp[j] |= dp[j - k * a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[x])</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Indexed Tree</title>
    <url>/2023/01/13/Binary-Indexed-Tree/</url>
    <content><![CDATA[<p><strong>1.原始模板</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// O(n)建树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[i] += arr[i];</span><br><span class="line">            <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">                tree[j] += tree[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单点更新</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前n项和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">querySum</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区间查询</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">querySum</span>(r) - <span class="built_in">querySum</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.维护区间最值</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] = <span class="built_in">max</span>(tree[idx], x), idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryMax</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res = <span class="built_in">max</span>(res, tree[idx]), idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = arr[r];</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, arr[r]);</span><br><span class="line">            <span class="keyword">for</span> (--r; r - l &gt;= <span class="built_in">lowbit</span>(r); r -= <span class="built_in">lowbit</span>(r))</span><br><span class="line">                res = <span class="built_in">max</span>(res, tree[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.数列中小于等于x的元素个数</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">update</span>(arr[i], <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">queryAns</span>(x);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.求逆序对</strong></p>
<ul>
<li>数据值小时</li>
</ul>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(arr[i], <span class="number">1</span>);</span><br><span class="line">            res +=</span><br><span class="line">                i - <span class="built_in">queryAns</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据值过大</li>
</ul>
<p><strong>先离散化处理</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 储存数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val, id;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.val != y.val)</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">    <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要代码</span></span><br><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::<span class="built_in">sort</span>(arr + <span class="number">1</span>, arr + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            b[arr[i].id] = i;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(b[i], <span class="number">1</span>);</span><br><span class="line">            res += i - <span class="built_in">queryAns</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 843 (Div.2) A1-A2</title>
    <url>/2023/01/11/Codeforces-Round-843-Div-2-A-C/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://codeforces.com/contest/1775" title="前往比赛">https://codeforces.com/contest/1775</a></p>
</blockquote>
<h1 id="A1-Gardener-and-the-Capybaras-easy-version"><a href="#A1-Gardener-and-the-Capybaras-easy-version" class="headerlink" title="A1.Gardener and the Capybaras (easy version)"></a><strong>A1.Gardener and the Capybaras (easy version)</strong></h1><p><strong>easy version</strong> 长度很小<br>枚举a的终点，即知道了b的起点，再枚举b的终点，即可知道c的起点，而c的终点就是字符串的最后一位</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string a,string b,string c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((b &gt;= a &amp;&amp; b &gt;= c) || (b &lt;= a &amp;&amp; b &lt;= c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str;cin &gt;&gt; str;</span><br><span class="line">	<span class="type">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">	string a,b,c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">		a = str.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">			b = str.<span class="built_in">substr</span>(i, j),c = str.<span class="built_in">substr</span>(i+j, len-(i+j));</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(a,b,c))&#123;</span><br><span class="line">				sign = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sign) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sign)</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;:(\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="A2-Gardener-and-the-Capybaras-hard-version"><a href="#A2-Gardener-and-the-Capybaras-hard-version" class="headerlink" title="A2.Gardener and the Capybaras (hard version)"></a><strong>A2.Gardener and the Capybaras (hard version)</strong></h1><p><strong>hard version</strong> <strong>n &lt;&#x3D; 200000</strong><br>继续 <strong>O(n^2)</strong> 枚举肯定是会超时了，通过题意可以发现如下规律：</p>
<ol>
<li>字符串a,b,c中，<strong>b中含’a’时</strong>，可以假设 <strong>b为最小</strong> 的，b中如果 <strong>只有一个’a’</strong> 的话，一定满足 <strong>b&lt;&#x3D;a &amp;&amp; b&lt;&#x3D;c</strong> </li>
<li><strong>b中含’b’时</strong>，可以假设 <strong>b为最大</strong> 的，可以 <strong>令str[1…n-2]为b</strong>，s[1]肯定为’b’，如果有’a’，那么考虑规律1，此时，a &#x3D; s[0],c &#x3D; s[n-1]，b一定满足 <strong>b&gt;&#x3D;a &amp;&amp; b &gt;&#x3D;c</strong></li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str;cin &gt;&gt; str;</span><br><span class="line">	<span class="type">bool</span> sign = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">	string a, b, c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(str[i] == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">			sign = <span class="literal">true</span>;</span><br><span class="line">			a = str.<span class="built_in">substr</span>(<span class="number">0</span>, i),b = <span class="string">&quot;a&quot;</span>,c = str.<span class="built_in">substr</span>(i+<span class="number">1</span>, len-i);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!sign)&#123;</span><br><span class="line">		<span class="type">int</span> scr = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(str[i] == <span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">				scr = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(scr)&#123;</span><br><span class="line">			sign = <span class="literal">true</span>;</span><br><span class="line">			a = str.<span class="built_in">substr</span>(<span class="number">0</span>, scr),b = str.<span class="built_in">substr</span>(scr, len<span class="number">-1</span>-scr),c = str.<span class="built_in">substr</span>(len<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sign)</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;:(\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>B开始就懵了（想做白兰のfw罢了</p>
</blockquote>
]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 857(Div 2)-A.Likes</title>
    <url>/2023/03/12/Codeforces-Round-857-Div-2-A-Likes/</url>
    <content><![CDATA[<blockquote>
<p>题目链接：<a href="https://codeforces.com/contest/1802/problem/A">Likes</a></p>
</blockquote>
<p><strong>题目大意</strong>：</p>
<p>给出n个时刻，每个时刻每个人可以采取两种行为</p>
<ol>
<li>put 一个 like</li>
<li>remove 一个 like</li>
</ol>
<p>求每个时刻like最大的情况和最小的情况</p>
<p>注意：这个人 <strong>没有put之前不能remove</strong></p>
<p><strong>思路</strong>：</p>
<ul>
<li>最大情况：将 a 序列 <strong>从大到小</strong> 排序，判断 a[i] 和 0 的关系，大于 0 like++，小于 0 like–，同时输出即可</li>
<li>最小情况：按照绝对值统计每个数的正的数量和负的数量，按照负的数量从大到小排序每个数，遍历如果一个负的能够对应到正的，则输出一个 1 0 的数对，正负数量同时减一，结束后，再遍历一遍正的数量大于0的元素，每次like++ ，正的数量减一，同时输出当前like</li>
</ul>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> z,f; &#125;;map&lt;<span class="type">int</span>,Node&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[<span class="built_in">abs</span>(x)].z++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[<span class="built_in">abs</span>(x)].f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>(),[](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res++;<span class="built_in">out</span>(res);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res--;<span class="built_in">out</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">R_node</span> &#123; <span class="type">int</span> val,z,f; &#125;;vector&lt;R_node&gt; vec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [k,v] : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(&#123;k,v.z,v.f&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](R_node x,R_node y)-&gt;<span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.f &gt; y.f;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[k,z,f] : vec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> scr = f;</span><br><span class="line">        <span class="keyword">if</span>(scr &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; scr;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(z &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">out</span>(<span class="string">&quot;1 0&quot;</span>);</span><br><span class="line">                    z--;f--;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> kk = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[k,z,f] : vec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(z &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> scr = z;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; scr;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                kk++;<span class="built_in">out</span>(kk);</span><br><span class="line">                z--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>题集</tag>
      </tags>
  </entry>
  <entry>
    <title>Disjoint Set Union</title>
    <url>/2023/01/10/Disjoint-Set-Union/</url>
    <content><![CDATA[<p><strong>并查集</strong> 是一种 <strong>树型</strong> 的数据结构，用于处理一些 <strong>不相交集</strong> 的合并及查询问题</p>
<p>主要有如下两种操作：</p>
<ol>
<li>合并两个集合（merge）</li>
<li>判断两个元素是否在同一个集合中（find）</li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DSU&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> fa[N],r[N];</span><br><span class="line">	<span class="comment">// 初始化</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) </span><br><span class="line">			fa[i] = i,r[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查找（路径压缩）</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">			<span class="keyword">return</span> fa[x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 合并（按秩合并）</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> fx = <span class="built_in">find</span>(x),fy = <span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(r[fx] &lt;= r[fy]) fa[fx] = y;</span><br><span class="line">		<span class="keyword">else</span> fa[fy] = fx;</span><br><span class="line">		<span class="keyword">if</span>(r[fx] == r[fy] &amp;&amp; fx != fy) r[y]++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>用法</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DSU::<span class="built_in">init</span>(n);</span><br><span class="line">DSU::<span class="built_in">find</span>(x);</span><br><span class="line">DSU::<span class="built_in">merge</span>(x,y);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Sparse Table</title>
    <url>/2023/01/22/Sparse-Table/</url>
    <content><![CDATA[<p>ST表，是一种用于解决可重复贡献问题的数据结构</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ST</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> LG = <span class="built_in">log2</span>(N) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> st[N][LG];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">opr</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = <span class="built_in">log2</span>(n) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            st[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; j++)</span><br><span class="line">                st[j][i] = <span class="built_in">opr</span>(st[j][i - <span class="number">1</span>], st[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = __lg(r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">opr</span>(st[l][s], st[r - (<span class="number">1</span> &lt;&lt; s) + <span class="number">1</span>][s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他操作（修改opr函数即可）</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="built_in">min</span>(x,y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gcd</span></span><br><span class="line">__gcd(x,y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位与</span></span><br><span class="line">x &amp; y;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack &amp; Queue</title>
    <url>/2023/01/10/Stack-Queue/</url>
    <content><![CDATA[<p><strong>1.栈</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt = <span class="number">0</span>; <span class="comment">// tt 栈顶</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	stk[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">head</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> stk[tt];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> tt &gt; <span class="number">0</span>; <span class="comment">// true 则不空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.队列</strong></p>
<p><strong>(1) 普通队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],head = <span class="number">0</span>,tail = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	q[++tail] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	head++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> q[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> head &lt;= tail; <span class="comment">// true 则不空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>(2) 循环队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],head = <span class="number">0</span>,tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	q[tail++] = x;</span><br><span class="line">	<span class="keyword">if</span>(tail == n) tail = <span class="number">0</span>; <span class="comment">// 队尾是所有待输入元素的最后一个则让其和队首相接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	head++;</span><br><span class="line">	<span class="keyword">if</span>(head == n) head = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> q[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> head != tail; <span class="comment">// true 则为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.单调栈&#x2F;队列</strong></p>
<p><strong>(1) 单调栈</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(tt &amp;&amp; <span class="built_in">check</span>(stk[tt],i)) tt--; <span class="comment">// check() 确定单调递减||递增</span></span><br><span class="line">	stk[++tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>(2) 单调队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> head = <span class="number">0</span>,tail = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(head &lt;= tail &amp;&amp; <span class="built_in">check_out</span>(q[head])) head++; <span class="comment">// check_out() 判断是否不满足题意</span></span><br><span class="line">	<span class="keyword">while</span>(head &lt;= tail &amp;&amp; <span class="built_in">check</span>(q[tail],i)) tail--; <span class="comment">// check() 判断单调递减||递增</span></span><br><span class="line">	q[++tail] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
