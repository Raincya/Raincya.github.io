<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round 843 (Div.2) A1-A2</title>
    <url>/2023/01/11/Codeforces-Round-843-Div-2-A-C/</url>
    <content><![CDATA[<blockquote>
<p>比赛链接：<a href="https://codeforces.com/contest/1775" title="前往比赛">https://codeforces.com/contest/1775</a></p>
</blockquote>
<h1 id="A1-Gardener-and-the-Capybaras-easy-version"><a href="#A1-Gardener-and-the-Capybaras-easy-version" class="headerlink" title="A1.Gardener and the Capybaras (easy version)"></a><strong>A1.Gardener and the Capybaras (easy version)</strong></h1><p><strong>easy version</strong> 长度很小<br>枚举a的终点，即知道了b的起点，再枚举b的终点，即可知道c的起点，而c的终点就是字符串的最后一位</p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string a,string b,string c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((b &gt;= a &amp;&amp; b &gt;= c) || (b &lt;= a &amp;&amp; b &lt;= c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str;cin &gt;&gt; str;</span><br><span class="line">	<span class="type">bool</span> sign = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">	string a,b,c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">		a = str.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">			b = str.<span class="built_in">substr</span>(i, j),c = str.<span class="built_in">substr</span>(i+j, len-(i+j));</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(a,b,c))&#123;</span><br><span class="line">				sign = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sign) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sign)</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;:(\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="A2-Gardener-and-the-Capybaras-hard-version"><a href="#A2-Gardener-and-the-Capybaras-hard-version" class="headerlink" title="A2.Gardener and the Capybaras (hard version)"></a><strong>A2.Gardener and the Capybaras (hard version)</strong></h1><p><strong>hard version</strong> <strong>n &lt;&#x3D; 200000</strong><br>继续 <strong>O(n^2)</strong> 枚举肯定是会超时了，通过题意可以发现如下规律：</p>
<ol>
<li>字符串a,b,c中，<strong>b中含’a’时</strong>，可以假设 <strong>b为最小</strong> 的，b中如果 <strong>只有一个’a’</strong> 的话，一定满足 <strong>b&lt;&#x3D;a &amp;&amp; b&lt;&#x3D;c</strong> </li>
<li><strong>b中含’b’时</strong>，可以假设 <strong>b为最大</strong> 的，可以 <strong>令str[1…n-2]为b</strong>，s[1]肯定为’b’，如果有’a’，那么考虑规律1，此时，a &#x3D; s[0],c &#x3D; s[n-1]，b一定满足 <strong>b&gt;&#x3D;a &amp;&amp; b &gt;&#x3D;c</strong></li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str;cin &gt;&gt; str;</span><br><span class="line">	<span class="type">bool</span> sign = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">	string a, b, c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(str[i] == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">			sign = <span class="literal">true</span>;</span><br><span class="line">			a = str.<span class="built_in">substr</span>(<span class="number">0</span>, i),b = <span class="string">&quot;a&quot;</span>,c = str.<span class="built_in">substr</span>(i+<span class="number">1</span>, len-i);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!sign)&#123;</span><br><span class="line">		<span class="type">int</span> scr = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len<span class="number">-2</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(str[i] == <span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">				scr = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(scr)&#123;</span><br><span class="line">			sign = <span class="literal">true</span>;</span><br><span class="line">			a = str.<span class="built_in">substr</span>(<span class="number">0</span>, scr),b = str.<span class="built_in">substr</span>(scr, len<span class="number">-1</span>-scr),c = str.<span class="built_in">substr</span>(len<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sign)</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;:(\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>B开始就懵了（想做白兰のfw罢了</p>
</blockquote>
]]></content>
      <categories>
        <category>题解记录</category>
      </categories>
      <tags>
        <tag>训练赛补题</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack &amp; Queue</title>
    <url>/2023/01/10/Stack-Queue/</url>
    <content><![CDATA[<p><strong>1.栈</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt = <span class="number">0</span>; <span class="comment">// tt 栈顶</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	stk[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">head</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> stk[tt];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> tt &gt; <span class="number">0</span>; <span class="comment">// true 则不空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.队列</strong></p>
<p><strong>(1) 普通队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],head = <span class="number">0</span>,tail = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	q[++tail] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	head++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> q[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> head &lt;= tail; <span class="comment">// true 则不空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>(2) 循环队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],head = <span class="number">0</span>,tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	q[tail++] = x;</span><br><span class="line">	<span class="keyword">if</span>(tail == n) tail = <span class="number">0</span>; <span class="comment">// 队尾是所有待输入元素的最后一个则让其和队首相接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	head++;</span><br><span class="line">	<span class="keyword">if</span>(head == n) head = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> q[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> head != tail; <span class="comment">// true 则为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.单调栈&#x2F;队列</strong></p>
<p><strong>(1) 单调栈</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(tt &amp;&amp; <span class="built_in">check</span>(stk[tt],i)) tt--; <span class="comment">// check() 确定单调递减||递增</span></span><br><span class="line">	stk[++tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>(2) 单调队列</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> head = <span class="number">0</span>,tail = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(head &lt;= tail &amp;&amp; <span class="built_in">check_out</span>(q[head])) head++; <span class="comment">// check_out() 判断是否不满足题意</span></span><br><span class="line">	<span class="keyword">while</span>(head &lt;= tail &amp;&amp; <span class="built_in">check</span>(q[tail],i)) tail--; <span class="comment">// check() 判断单调递减||递增</span></span><br><span class="line">	q[++tail] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Disjoint Set Union</title>
    <url>/2023/01/10/Disjoint-Set-Union/</url>
    <content><![CDATA[<p><strong>并查集</strong> 是一种 <strong>树型</strong> 的数据结构，用于处理一些 <strong>不相交集</strong> 的合并及查询问题</p>
<p>主要有如下两种操作：</p>
<ol>
<li>合并两个集合（merge）</li>
<li>判断两个元素是否在同一个集合中（find）</li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DSU&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> fa[N],r[N];</span><br><span class="line">	<span class="comment">// 初始化</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) </span><br><span class="line">			fa[i] = i,r[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查找（路径压缩）</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">			<span class="keyword">return</span> fa[x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 合并（按秩合并）</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> fx = <span class="built_in">find</span>(x),fy = <span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(r[fx] &lt;= r[fy]) fa[fx] = y;</span><br><span class="line">		<span class="keyword">else</span> fa[fy] = fx;</span><br><span class="line">		<span class="keyword">if</span>(r[fx] == r[fy] &amp;&amp; fx != fy) r[y]++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>用法</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DSU::<span class="built_in">init</span>(n);</span><br><span class="line">DSU::<span class="built_in">find</span>(x);</span><br><span class="line">DSU::<span class="built_in">merge</span>(x,y);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Indexed Tree</title>
    <url>/2023/01/13/Binary-Indexed-Tree/</url>
    <content><![CDATA[<p><strong>1.原始模板</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// O(n)建树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[i] += arr[i];</span><br><span class="line">            <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">                tree[j] += tree[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单点更新</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前n项和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">querySum</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区间查询</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">querySum</span>(r) - <span class="built_in">querySum</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.维护区间最值</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] = <span class="built_in">max</span>(tree[idx], x), idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryMax</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res = <span class="built_in">max</span>(res, tree[idx]), idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = arr[r];</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, arr[r]);</span><br><span class="line">            <span class="keyword">for</span> (--r; r - l &gt;= <span class="built_in">lowbit</span>(r); r -= <span class="built_in">lowbit</span>(r))</span><br><span class="line">                res = <span class="built_in">max</span>(res, tree[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.数列中小于等于x的元素个数</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">update</span>(arr[i], <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">queryAns</span>(x);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.求逆序对</strong></p>
<ul>
<li>数据值小时</li>
</ul>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(arr[i], <span class="number">1</span>);</span><br><span class="line">            res +=</span><br><span class="line">                i - <span class="built_in">queryAns</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据值过大</li>
</ul>
<p><strong>先离散化处理</strong></p>
<p><strong>代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 储存数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val, id;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.val != y.val)</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">    <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要代码</span></span><br><span class="line"><span class="keyword">namespace</span> TreeArr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n)</span><br><span class="line">            tree[idx] += x, idx += <span class="built_in">lowbit</span>(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queryAns</span><span class="params">(<span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx)</span><br><span class="line">            res += tree[idx], idx -= <span class="built_in">lowbit</span>(idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::<span class="built_in">sort</span>(arr + <span class="number">1</span>, arr + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            b[arr[i].id] = i;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(b[i], <span class="number">1</span>);</span><br><span class="line">            res += i - <span class="built_in">queryAns</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算竞模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
